# -*- coding: utf-8 -*-
"""Converting scanned PDFs (prototype 2)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gvNYYW6NxZBCv-wBDsAj3Usc63dP9w0H

#PDF scanner
"""

#Lets start over but this time make sure to build a more
#readable and maintainable structure for our code

!apt-get install tesseract-ocr

!apt install ghostscript

import subprocess
import sys

def install_package(package):
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])

def install_dependencies():
  packages = [
        'ocrmypdf',
        'pdfplumber==0.11.4',
        'PyPDF2',
        'img2table',
        'pytesseract',
  ]
  for package in packages:
    try:
      install_package(package)
    except subprocess.CalledProcessError as e:
      print(f'Failed to install {package}: {e}')
      raise

install_dependencies()

import os
import ocrmypdf
import pdfplumber
import logging
import re

logging.basicConfig(level = logging.INFO, format = '%(asctime)s - %(levelname)s - %(message)s')

class PDFProcessor:
    def __init__(self,input_path, output_path = 'output.pdf'):
        self.input_path = input_path
        self.output_path = output_path
        self.filename = os.path.basename(input_path)

    def run_ocr(self):
      try:
        ocrmypdf.ocr(self.input_path, self.output_path)
        logging.info(f'OCR completed: {self.output_path}')
      except Exception as e:
        logging.error(f'OCR failed: {e}')
        raise

    def extract_text(self):
      try:
        with pdfplumber.open(self.output_path) as pdf:
          text = ''
          for page in pdf.pages:
            text += page.extract_text()
        logging.info("Text extraction completed")
        return text
      except Exception as e:
        logging.error(f'Text extraction failed: {e}')
        raise

    def summarize(self):
      return f'Proceed {self.filename} and saved output to {self.output_path}'

input_path = ('/content/3031358-TTI_SN20210823-004(01SEP).pdf')
processor = PDFProcessor(input_path)
processor.run_ocr()
text = processor.extract_text()
summary = processor.summarize()
print(summary)

with pdfplumber.open('/content/output.pdf') as pdf:
    page = pdf.pages[0]
    text = page.extract_text()
    print(text)

class NumberExtractor:
  def __init__(self,text):
    self.text = text
    self.po_invoice_numbers = self.extract_numbers(r'\b\d{9}\b')
    self.customer_part_numbers = self.extract_numbers(r'\b\d{7}\b')
    self.po_index = 2
    self.cp_index = 2

  def extract_numbers(self,patterns):
    return re.findall(patterns, self.text)

  def get_next_po_invoice_number(self):
    if self.po_index < len(self.po_invoice_numbers):
       number = self.po_invoice_numbers[self.po_index]
       self.po_index += 1
       return f"Purchase Order (P/O) or Invoice No: {number}"
    else:
        return "No more Invoice Numbers available."

  def get_next_customer_part_number(self):
    if self.cp_index < len(self.customer_part_numbers):
      number = self.customer_part_numbers[self.cp_index]
      self.cp_index += 1
      return f'Customer Part Number (Customer P/N): {number}'
    else:
      return "No more Customer Part Numbers available."

extractor = NumberExtractor(text)

print(extractor.get_next_po_invoice_number())
print(extractor.get_next_po_invoice_number())
print(extractor.get_next_customer_part_number())
print(extractor.get_next_customer_part_number())

#Invoice Date
date_pattern = r"\b\d{2}/\d{2}/\d{4}\b|\b\d{2}-\d{2}-\d{4}\b|\b\d{4}-\d{2}-\d{2}\b"
dates = re.findall(date_pattern, text)

if dates:
    print("Extracted Dates:")
    for i, date in enumerate(dates):
        print(f"Date {i+1}: {date}")

    print("First Date:", dates[0])

    print("Last Date:", dates[-1])

else:
    print("No dates found in the text.")


for date in dates:
    print("Date found:", date)